GIT REPOSITORY
https://github.com/kubicek-skoleni/aspnet/

dot.net
https://dotnet.microsoft.com/en-us/apps/aspnet
https://learn.microsoft.com/en-us/aspnet/core/mvc/overview?view=aspnetcore-7.0

Bootstrap.com
https://getbootstrap.com/
https://bootswatch.com/

alternativy
https://picocss.com/

https://materializecss.com/

https://tailwindcss.com/

https://themeforest.net/


VS
- (ctrl + Q) prohledává okna/funkce


IActionResult / interface (rùzné návratové typy, které splnují urèité podmínky - polymorfismus)

V home controller jsem pridal metodu Hello. Tu zavolám pomocí URL:
https://localhost:7274/Home/Hello


Pokud metoda xxx vrací View(), pøesmìruje se výstup na xxx.cshtml ve views

Komentáøe: zaèátek - @* konec - *@

Metoda @RenderBody() v _Loyout odkazuje na konkrétní použité stránky

TAG HELPERS
https://learn.microsoft.com/en-us/aspnet/core/mvc/views/tag-helpers/intro?view=aspnetcore-7.0

asp-append-version="true" - použití pro cachování lokální / jednou naète a poté jen lokální naèítá.
						- pøi zmìnì obsahu souboru se zmìní URL a pak naète nový soubor

Routing
 - kam aplikace nasmìruje
 -defaultni nastavení:
        app.MapControllerRoute(
        name: "default",
        pattern: "{controller=Home}/{action=Index}/{id?}");

Models:
 místo List<> používat radìji  ICollection - kvùli Entity Framework
     public ICollection<Contract> Contracts { get; set; } = new HashSet<Contract>();
Podstrèení vlastního pojmenování prvkù pomocí atributu [Display(Name = "Jméno")]]
    [MaxLength(250)]
    [Display(Name = "Jméno")]
    public string? FirstName { get; set; }
Urèení zobrazení jen data pro DateTime:
    [DataType(DataType.Date)]

Data

public virtual DbSet<Address> Addresses { get; set; } kde Addresses je název tabulky v DB

Controler
1)  Dependenci Injection - podstrèit dbContext do konstruktoru
        private readonly InsCorpDbContext _context;
        public PersonController(InsCorpDbContext context)
        {
            _context = context;
        }
2)  Naplnìní dat pomocí LINQ a pøedání do View

Propojení s MVC

do program.cs pøidat DbContext pøed 'var app = builder.Build();':
    builder.Services.AddDbContext<InsCorpDbContext>();

pøedání hodnot do view:
    pøes dictionary ViewData: ViewData["status"] = status;


using pro všechny view:
vložení do _ViewImports.cshtml

pøístup k datùm z propojené tabulky - .Include()
var top100 = _context.Persons.Include(person => person.Constracts)
                .OrderBy(person => person.Id)
                .Take(100).ToList();

Formuláø:

1)  formuláø jako takový
2) metoda, která zpracuje data z formuláøe

deklarace 2. metody pomocí atributu [HttpPost] + model binding
        public IActionResult Add()
        {
            return View();
        }

        [HttpPost]
        public IActionResult Add(Person person)
        {
            // ulozit osobu do DB
            _context.Persons.Add(person);
            _context.SaveChanges();

            // navrat GUI
            return Redirect($"/person/detail/{person.Id}");
        }

Ošetøení špatného requestu:

1)  return NotFound(); - metoda se dìdí od Controller
            // ziskat data
            var person = _context.Persons.Find(id);

            if(person == null)
            {
                return NotFound();
            }

Edit:
 1] aktualiyace prvku po prvku
    dbPerson.FirstName  = formPerson.FirstName; ...
 2] pøiøazení nových hodnot z Form objektu z DB: - pokud mám ve formuláøi všechny vlastnosti!
    _context.Entry(dbPerson).CurrentValues.SetValues(formPerson);
 3] objektu z form pøiøadit status MODIFIED
    _context.Entry(dbPerson).State = EntityState.Modified;

    doporuèuje se nezasahovat do vnitrnich stavu - u jednoducheho zvolit 1) a delších 2)


pøihlášení uživatelù:
[Authorize] atribut u metod

Databáze:

create: update-database -Context ApplicationDbContext
migrace: add-migration BirthNumber -Context InsCorpDbContext
        update-database -Context InsCorpDbContext
        

    